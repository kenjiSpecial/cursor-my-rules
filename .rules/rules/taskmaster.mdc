---
description: Comprehensive reference for Taskmaster MCP tools and CLI commands.
globs: **/*
alwaysApply: true
---
# Taskmaster ツール & コマンドリファレンス

この document は、Taskmaster とのインタラクションに関する詳細なリファレンスを提供します。Cursor のような統合に適した推奨の MCP ツールと、直接的な user 操作やフォールバック用に設計された対応する `task-master` CLI command の両方を網羅しています。

**注意:** Taskmaster とプログラム的に、または統合ツールを介してインタラクションを行う場合、performance、構造化データ、および error handling の観点から、**MCP ツールの使用を強く推奨します**。CLI command は、user-friendly な代替手段およびフォールバックとして機能します。

**重要:** いくつかの MCP ツールは AI 処理を伴います... AI を活用したツールには、`parse_prd`, `analyze_project_complexity`, `update_subtask`, `update_task`, `update`, `expand_all`, `expand_task`, および `add_task` が含まれます。

---

## 初期化 & セットアップ (Initialization & Setup)

### 1. プロジェクトの初期化 (`init`)

*   **MCP ツール:** `initialize_project`
*   **CLI Command:** `task-master init [options]`
*   **Description:** `新しい project のために、現在のディレクトリに基本的な Taskmaster のファイル構造と configuration をセットアップします。`
*   **主要な CLI Options:**
    *   `--name <name>`: `Taskmaster の configuration で project の名前を設定します。`
    *   `--description <text>`: `project の簡単な説明を提供します。`
    *   `--version <version>`: `project の初期 version を設定します。例: '0.1.0'`。
    *   `-y, --yes`: `インタラクティブなプロンプトなしで、デフォルト設定を使用して Taskmaster を迅速に初期化します。`
*   **Usage:** 新しい project の開始時に一度実行します。
*   **MCP バリアント Description:** `'task-master init' command を実行して、新しい project のために現在のディレクトリに基本的な Taskmaster のファイル構造と configuration をセットアップします。`
*   **主要な MCP Parameters/Options:**
    *   `projectName`: `project の名前を設定します。` (CLI: `--name <name>`)
    *   `projectDescription`: `project の簡単な説明を提供します。` (CLI: `--description <text>`)
    *   `projectVersion`: `project の初期 version を設定します。例: '0.1.0'`。 (CLI: `--version <version>`)
    *   `authorName`: `作成者名。` (CLI: `--author <author>`)
    *   `skipInstall`: `dependencies のインストールをスキップします。デフォルトは false です。` (CLI: `--skip-install`)
    *   `addAliases`: `シェルエイリアス tm と taskmaster を追加します。デフォルトは false です。` (CLI: `--aliases`)
    *   `yes`: `プロンプトをスキップし、デフォルト/提供された引数を使用します。デフォルトは false です。` (CLI: `-y, --yes`)
*   **Usage:** 新しい project の開始時に一度実行します。通常は Cursor のような統合ツールを介して行います。MCP server の現在の作業ディレクトリで動作します。
*   **重要:** 完了後、task を生成するために PRD を parse する**必要があります**。それまでは task file は存在しません。初期化後の次のステップは、`scripts/example_prd.txt` のサンプル PRD を使用して、彼らのアイデアに基づいて PRD を作成し、`parse-prd` で使用することです。

### 2. PRD の Parse (`parse_prd`)

*   **MCP ツール:** `parse_prd`
*   **CLI Command:** `task-master parse-prd [file] [options]`
*   **Description:** `Product Requirements Document (PRD) またはテキストファイルを Taskmaster で parse し、初期の task セットを tasks.json に自動的に生成します。`
*   **主要な Parameters/Options:**
    *   `input`: `Taskmaster が task を parse するための PRD または要件テキストファイルへのパス。` (CLI: `[file]` 位置引数または `-i, --input <file>`)
    *   `output`: `生成された 'tasks.json' ファイルを Taskmaster がどこに保存するかを指定します。デフォルトは 'tasks/tasks.json' です。` (CLI: `-o, --output <file>`)
    *   `numTasks`: `Taskmaster が document から生成することを目指すトップレベル task のおおよその数。` (CLI: `-n, --num-tasks <number>`)
    *   `force`: `確認を求めずに既存の 'tasks.json' を Taskmaster が上書きできるようにする場合に使用します。` (CLI: `-f, --force`)
*   **Usage:** 既存の要件 document から project をブートストラップするのに役立ちます。
*   **Notes:** Task Master は、PRD で言及されているライブラリ、データベーススキーマ、フレームワーク、tech stack などの特定の要件に厳密に従い、PRD が完全に指定されていないギャップを埋めます。Task は、過剰なエンジニアリングを避けつつ、最も直接的な実装パスを提供するように設計されています。
*   **重要:** この MCP ツールは AI 呼び出しを行い、完了までに最大1分かかる場合があります。操作の進行中は待機するよう user に伝えてください。User が PRD を持っていない場合は、彼らのアイデアについて話し合い、その後 `scripts/example_prd.txt` のサンプル PRD をテンプレートとして使用して、彼らのアイデアに基づいて PRD を作成し、`parse-prd` で使用することを提案してください。

---

## AI モデル設定 (AI Model Configuration)

### 2. モデルの管理 (`models`)
*   **MCP ツール:** `models`
*   **CLI Command:** `task-master models [options]`
*   **Description:** `現在の AI model configuration を表示するか、さまざまな役割 (メイン, research, フォールバック) に特定のモデルを設定します。Ollama および OpenRouter 用のカスタムモデル ID の設定を許可します。`
*   **主要な MCP Parameters/Options:**
    *   `setMain <model_id>`: `task 生成/更新用のプライマリモデル ID を設定します。` (CLI: `--set-main <model_id>`)
    *   `setResearch <model_id>`: `research-backed な操作用のモデル ID を設定します。` (CLI: `--set-research <model_id>`)
    *   `setFallback <model_id>`: `プライマリが失敗した場合に使用するモデル ID を設定します。` (CLI: `--set-fallback <model_id>`)
    *   `ollama <boolean>`: `設定されたモデル ID がカスタム Ollama モデルであることを示します。` (CLI: `--ollama`)
    *   `openrouter <boolean>`: `設定されたモデル ID がカスタム OpenRouter モデルであることを示します。` (CLI: `--openrouter`)
    *   `listAvailableModels <boolean>`: `true の場合、現在役割に割り当てられていない利用可能なモデルをリストします。` (CLI: 直接の同等物なし; CLI は利用可能なものを自動的にリストします)
    *   `projectRoot <string>`: `オプション。project root ディレクトリへの絶対パス。` (CLI: 自動的に決定されます)
*   **主要な CLI Options:**
    *   `--set-main <model_id>`: `プライマリモデルを設定します。`
    *   `--set-research <model_id>`: `research モデルを設定します。`
    *   `--set-fallback <model_id>`: `フォールバックモデルを設定します。`
    *   `--ollama`: `提供されたモデル ID が Ollama 用であることを指定します (--set-* と共に使用)。`
    *   `--openrouter`: `提供されたモデル ID が OpenRouter 用であることを指定します (--set-* と共に使用)。OpenRouter API に対して検証します。`
    *   `--setup`: `カスタム Ollama/OpenRouter ID を含むモデルを設定するためのインタラクティブなセットアップを実行します。`
*   **Usage (MCP):** 設定フラグなしで呼び出して現在の config を取得します。有効なモデル ID と共に `setMain`, `setResearch`, または `setFallback` を使用して configuration を更新します。割り当てられていないモデルのリストを取得するには `listAvailableModels: true` を使用します。カスタムモデルを設定するには、モデル ID を提供し、`ollama: true` または `openrouter: true` を設定します。
*   **Usage (CLI):** フラグなしで実行して現在の configuration と利用可能なモデルを表示します。特定の役割を更新するには設定フラグを使用します。カスタムモデルを含むガイド付き configuration には `--setup` を使用します。フラグを介してカスタムモデルを設定するには、`--set-<role>=<model_id>` と共に `--ollama` または `--openrouter` のいずれかを使用します。
*   **Notes:** Configuration は project root の `.taskmasterconfig` に保存されます。この command/ツールはそのファイルを変更します。内部でサポートされているモデルを確認するには `listAvailableModels` または `task-master models` を使用します。OpenRouter のカスタムモデルは、ライブ API に対して検証されます。Ollama のカスタムモデルはライブでは検証されません。
*   **API note:** 選択された AI プロバイダー (モデルに基づく) の API キーは、MCP context でアクセス可能にするために `mcp.json` ファイルに存在する必要があります。CLI がそれらを読み取れるようにするには、API キーがローカルの `.env` ファイルに存在する必要があります。
*   **Model costs:** サポートされているモデルのコストはドルで表示されます。input/output 値が 3 の場合は $3.00 です。値が 0.8 の場合は $0.80 です。
*   **Warning:** .taskmasterconfig ファイルを手動で編集しないでください。必要に応じて、MCP または CLI 形式の付属の command を使用してください。利用可能な場合は常に MCP ツールを優先し、フォールバックとして CLI を使用してください。

---

## Task の一覧表示 & 表示 (Task Listing & Viewing)

### 3. Task の取得 (`get_tasks`)

*   **MCP ツール:** `get_tasks`
*   **CLI Command:** `task-master list [options]`
*   **Description:** `Taskmaster の task を一覧表示し、オプションで status でフィルタリングし、subtask を表示します。`
*   **主要な Parameters/Options:**
    *   `status`: `この status に一致する Taskmaster の task のみを表示します。例: 'pending' または 'done'`。 (CLI: `-s, --status <status>`)
    *   `withSubtasks`: `リスト内の親 task の下にインデントされた subtask を含めます。` (CLI: `--with-subtasks`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** project の status の概要を取得します。多くの場合、作業セッションの開始時に使用されます。

### 4. 次の Task の取得 (`next_task`)

*   **MCP ツール:** `next_task`
*   **CLI Command:** `task-master next [options]`
*   **Description:** `Taskmaster に、status と完了した dependencies に基づいて、次に作業できる利用可能な task を表示するように依頼します。`
*   **主要な Parameters/Options:**
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** 計画に従って次に何をすべきかを特定します。

### 5. Task 詳細の取得 (`get_task`)

*   **MCP ツール:** `get_task`
*   **CLI Command:** `task-master show [id] [options]`
*   **Description:** `ID で指定された特定の Taskmaster task または subtask の詳細情報を表示します。`
*   **主要な Parameters/Options:**
    *   `id`: `必須。表示したい Taskmaster task (例: '15') または subtask (例: '15.2') の ID。` (CLI: `[id]` 位置引数または `-i, --id <id>`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** 作業を開始する前に、特定の task の完全な詳細、実装ノート、およびテスト戦略を理解します。

---

## Task の作成 & 変更 (Task Creation & Modification)

### 6. Task の追加 (`add_task`)

*   **MCP ツール:** `add_task`
*   **CLI Command:** `task-master add-task [options]`
*   **Description:** `Taskmaster に新しい task を記述して追加します。AI がそれを構造化します。`
*   **主要な Parameters/Options:**
    *   `prompt`: `必須。Taskmaster に作成させたい新しい task を記述します。例: "Implement user authentication using JWT"`。 (CLI: `-p, --prompt <text>`)
    *   `dependencies`: `この新しい task を開始する前に完了する必要がある Taskmaster task の ID を指定します。例: '12,14'`。 (CLI: `-d, --dependencies <ids>`)
    *   `priority`: `新しい task の priority を設定します: 'high', 'medium', または 'low'。デフォルトは 'medium' です。` (CLI: `--priority <priority>`)
    *   `research`: `Taskmaster が research ロールを使用して、より情報に基づいた task 作成を行うことを有効にします。` (CLI: `-r, --research`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** development 中に新しく特定された task を迅速に追加します。
*   **重要:** この MCP ツールは AI 呼び出しを行い、完了までに最大1分かかる場合があります。操作の進行中は待機するよう user に伝えてください。

### 7. Subtask の追加 (`add_subtask`)

*   **MCP ツール:** `add_subtask`
*   **CLI Command:** `task-master add-subtask [options]`
*   **Description:** `Taskmaster の親 task に新しい subtask を追加するか、既存の task を subtask に変換します。`
*   **主要な Parameters/Options:**
    *   `id` / `parent`: `必須。親となる Taskmaster task の ID。` (MCP: `id`, CLI: `-p, --parent <id>`)
    *   `taskId`: `既存のトップレベル Taskmaster task を指定された親の subtask に変換したい場合に使用します。` (CLI: `-i, --task-id <id>`)
    *   `title`: `taskId を使用しない場合は必須。Taskmaster が作成する新しい subtask のタイトル。` (CLI: `-t, --title <title>`)
    *   `description`: `新しい subtask の簡単な説明。` (CLI: `-d, --description <text>`)
    *   `details`: `新しい subtask の実装ノートまたは詳細を提供します。` (CLI: `--details <text>`)
    *   `dependencies`: `この新しい subtask の前に完了する必要がある他の task または subtask の ID を指定します。例: '15' または '16.1'`。 (CLI: `--dependencies <ids>`)
    *   `status`: `新しい subtask の初期 status を設定します。デフォルトは 'pending' です。` (CLI: `-s, --status <status>`)
    *   `skipGenerate`: `subtask を追加した後、Taskmaster が markdown task file を自動的に再生成するのを防ぎます。` (CLI: `--skip-generate`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** task を手動でブレークダウンするか、既存の task を再編成します。

### 8. Task の更新 (`update`)

*   **MCP ツール:** `update`
*   **CLI Command:** `task-master update [options]`
*   **Description:** `特定の task ID から開始して、新しい context や変更に基づいて Taskmaster の複数の今後の task を更新します。`
*   **主要な Parameters/Options:**
    *   `from`: `必須。Taskmaster が更新を開始する最初の task の ID。この ID 以上の 'done' でないすべての task が考慮されます。` (CLI: `--from <id>`)
    *   `prompt`: `必須。Taskmaster が task に適用する変更または新しい context を説明します。例: "We are now using React Query instead of Redux Toolkit for data fetching"`。 (CLI: `-p, --prompt <text>`)
    *   `research`: `Taskmaster が research ロールを使用して、より情報に基づいた更新を行うことを有効にします。適切な API キーが必要です。` (CLI: `-r, --research`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** 複数の将来の task に影響を与える大幅な実装変更や方向転換に対応します。CLI 例: `task-master update --from='18' --prompt='Switching to React Query.\nNeed to refactor data fetching...'`
*   **重要:** この MCP ツールは AI 呼び出しを行い、完了までに最大1分かかる場合があります。操作の進行中は待機するよう user に伝えてください。

### 9. Task の更新 (`update_task`)

*   **MCP ツール:** `update_task`
*   **CLI Command:** `task-master update-task [options]`
*   **Description:** `ID で指定された特定の Taskmaster task または subtask を変更し、新しい情報や変更を組み込みます。`
*   **主要な Parameters/Options:**
    *   `id`: `必須。更新したい特定の Taskmaster task (例: '15') または subtask (例: '15.2') の ID。` (CLI: `-i, --id <id>`)
    *   `prompt`: `必須。特定の変更を説明するか、Taskmaster がこの task に組み込むべき新しい情報を提供します。` (CLI: `-p, --prompt <text>`)
    *   `research`: `Taskmaster が research ロールを使用して、より情報に基づいた更新を行うことを有効にします。適切な API キーが必要です。` (CLI: `-r, --research`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** 新しい理解やフィードバックに基づいて特定の task を改良します。CLI 例: `task-master update-task --id='15' --prompt='Clarification: Use PostgreSQL instead of MySQL.\nUpdate schema details...'`
*   **重要:** この MCP ツールは AI 呼び出しを行い、完了までに最大1分かかる場合があります。操作の進行中は待機するよう user に伝えてください。

### 10. Subtask の更新 (`update_subtask`)

*   **MCP ツール:** `update_subtask`
*   **CLI Command:** `task-master update-subtask [options]`
*   **Description:** `既存の content を上書きせずに、特定の Taskmaster subtask にタイムスタンプ付きのメモや詳細を追加します。反復的な実装ログ記録を目的としています。`
*   **主要な Parameters/Options:**
    *   `id`: `必須。情報を追加したい特定の Taskmaster subtask (例: '15.2') の ID。` (CLI: `-i, --id <id>`)
    *   `prompt`: `必須。Taskmaster が subtask の詳細に追加する情報またはメモを提供します。これがまだ存在しない*新しい*情報であることを確認してください。` (CLI: `-p, --prompt <text>`)
    *   `research`: `Taskmaster が research ロールを使用して、より情報に基づいた更新を行うことを有効にします。適切な API キーが必要です。` (CLI: `-r, --research`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** development 中に subtask に実装ノート、コードスニペット、または明確化を追加します。呼び出す前に、subtask の現在の詳細を確認して、新しい洞察のみを追加し、実装過程の詳細なログを構築し、冗長性を避けるのに役立ててください。CLI 例: `task-master update-subtask --id='15.2' --prompt='Discovered that the API requires header X.\nImplementation needs adjustment...'`
*   **重要:** この MCP ツールは AI 呼び出しを行い、完了までに最大1分かかる場合があります。操作の進行中は待機するよう user に伝えてください。

### 11. Task Status の設定 (`set_task_status`)

*   **MCP ツール:** `set_task_status`
*   **CLI Command:** `task-master set-status [options]`
*   **Description:** `1つ以上の Taskmaster task または subtask の status を更新します。例: 'pending', 'in-progress', 'done'`。
*   **主要な Parameters/Options:**
    *   `id`: `必須。更新する Taskmaster task または subtask の ID。例: '15', '15.2', または '16,17.1'`。 (CLI: `-i, --id <id>`)
    *   `status`: `必須。設定する新しい status。例: 'done', 'pending', 'in-progress', 'review', 'cancelled'`。 (CLI: `-s, --status <status>`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** development cycle を通じて task が進むにつれて進捗をマークします。

### 12. Task の削除 (`remove_task`)

*   **MCP ツール:** `remove_task`
*   **CLI Command:** `task-master remove-task [options]`
*   **Description:** `Taskmaster の task リストから task または subtask を完全に削除します。`
*   **主要な Parameters/Options:**
    *   `id`: `必須。完全に削除する Taskmaster task (例: '5') または subtask (例: '5.2') の ID。` (CLI: `-i, --id <id>`)
    *   `yes`: `確認プロンプトをスキップし、すぐに task を削除します。` (CLI: `-y, --yes`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** project で不要になった task または subtask を完全に削除します。
*   **Notes:** この操作は元に戻せないため、注意して使用してください。参照用に task を保持しつつアクティブな計画から除外したい場合は、代わりに 'blocked'、'cancelled'、または 'deferred' status の使用を検討してください。この command は、他の task の dependency 参照を自動的にクリーンアップします。

---

## Task の構造 & ブレークダウン (Task Structure & Breakdown)

### 13. Task の展開 (`expand_task`)

*   **MCP ツール:** `expand_task`
*   **CLI Command:** `task-master expand [options]`
*   **Description:** `Taskmaster の AI を使用して、複雑な task をより小さく管理しやすい subtask にブレークダウンします。デフォルトでは subtask を追加します。`
*   **主要な Parameters/Options:**
    *   `id`: `subtask にブレークダウンしたい特定の Taskmaster task の ID。` (CLI: `-i, --id <id>`)
    *   `num`: `オプション: Taskmaster が作成を目指す subtask の数を示唆します。それ以外の場合は複雑度分析/デフォルトを使用します。` (CLI: `-n, --num <number>`)
    *   `research`: `Taskmaster が research ロールを使用して、より情報に基づいた subtask 生成を行うことを有効にします。適切な API キーが必要です。` (CLI: `-r, --research`)
    *   `prompt`: `オプション: subtask を生成するために Taskmaster に追加の context または特定の指示を提供します。` (CLI: `-p, --prompt <text>`)
    *   `force`: `オプション: true の場合、新しい subtask を生成する前に既存の subtask をクリアします。デフォルトは false (追加) です。` (CLI: `--force`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** コーディングを開始する前に、複雑な task の詳細な実装計画を生成します。利用可能で `num` が指定されていない場合は、複雑度レポートの推奨を自動的に使用します。
*   **重要:** この MCP ツールは AI 呼び出しを行い、完了までに最大1分かかる場合があります。操作の進行中は待機するよう user に伝えてください。

### 14. 全 Task の展開 (`expand_all`)

*   **MCP ツール:** `expand_all`
*   **CLI Command:** `task-master expand --all [options]` (注意: CLI は `--all` フラグ付きの `expand` command を使用します)
*   **Description:** `Taskmaster に、複雑度分析またはデフォルトに基づいて、適格なすべての保留中/進行中の task を自動的に展開するように指示します。デフォルトでは subtask を追加します。`
*   **主要な Parameters/Options:**
    *   `num`: `オプション: Taskmaster が task ごとに作成を目指す subtask の数を示唆します。` (CLI: `-n, --num <number>`)
    *   `research`: `より情報に基づいた subtask 生成のために research ロールを有効にします。適切な API キーが必要です。` (CLI: `-r, --research`)
    *   `prompt`: `オプション: 展開中に Taskmaster が一般的に適用する追加の context を提供します。` (CLI: `-p, --prompt <text>`)
    *   `force`: `オプション: true の場合、適格な各 task に対して新しい subtask を生成する前に既存の subtask をクリアします。デフォルトは false (追加) です。` (CLI: `--force`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** 初期 task 生成後または複雑度分析後に、一度に複数の task をブレークダウンするのに役立ちます。
*   **重要:** この MCP ツールは AI 呼び出しを行い、完了までに最大1分かかる場合があります。操作の進行中は待機するよう user に伝えてください。

### 15. Subtask のクリア (`clear_subtasks`)

*   **MCP ツール:** `clear_subtasks`
*   **CLI Command:** `task-master clear-subtasks [options]`
*   **Description:** `1つ以上の指定された Taskmaster 親 task からすべての subtask を削除します。`
*   **主要な Parameters/Options:**
    *   `id`: `subtask を削除したい Taskmaster 親 task の ID。例: '15' または '16,18'。 (`all` を使用しない場合は必須) (CLI: `-i, --id <ids>`)
    *   `all`: `Taskmaster にすべての親 task から subtask を削除するように指示します。` (CLI: `--all`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** 以前のブレークダウンを置き換える必要がある場合に、`expand_task` で subtask を再生成する前に使用します。

### 16. Subtask の削除 (`remove_subtask`)

*   **MCP ツール:** `remove_subtask`
*   **CLI Command:** `task-master remove-subtask [options]`
*   **Description:** `Taskmaster の親から subtask を削除し、オプションでスタンドアロンの task に変換します。`
*   **主要な Parameters/Options:**
    *   `id`: `必須。削除する Taskmaster subtask の ID。例: '15.2' または '16.1,16.3'`。 (CLI: `-i, --id <id>`)
    *   `convert`: `使用する場合、Taskmaster は subtask を削除する代わりに通常のトップレベル task に変換します。` (CLI: `-c, --convert`)
    *   `skipGenerate`: `subtask を削除した後、Taskmaster が markdown task file を自動的に再生成するのを防ぎます。` (CLI: `--skip-generate`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** 不要な subtask を削除するか、subtask をトップレベル task に昇格させます。

---

## Dependency 管理 (Dependency Management)

### 17. Dependency の追加 (`add_dependency`)

*   **MCP ツール:** `add_dependency`
*   **CLI Command:** `task-master add-dependency [options]`
*   **Description:** `Taskmaster で dependency を定義し、ある task を別の task の前提条件にします。`
*   **主要な Parameters/Options:**
    *   `id`: `必須。別の task に依存する Taskmaster task の ID。` (CLI: `-i, --id <id>`)
    *   `dependsOn`: `必須。最初に完了する必要がある Taskmaster task、前提条件となる task の ID。` (CLI: `-d, --depends-on <id>`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <path>`)
*   **Usage:** task 間の正しい実行順序を確立します。

### 18. Dependency の削除 (`remove_dependency`)

*   **MCP ツール:** `remove_dependency`
*   **CLI Command:** `task-master remove-dependency [options]`
*   **Description:** `2つの Taskmaster task 間の dependency 関係を削除します。`
*   **主要な Parameters/Options:**
    *   `id`: `必須。前提条件を削除したい Taskmaster task の ID。` (CLI: `-i, --id <id>`)
    *   `dependsOn`: `必須。もはや前提条件であってはならない Taskmaster task の ID。` (CLI: `-d, --depends-on <id>`)
    *   `file`: `Taskmaster の 'tasks.json' ファイルへのパス。デフォルトは自動検出に依存します。` (CLI: `-f, --file <file>`)
*   **Usage:** 実行順序が変更された場合に task 関係を更新します。

### 19. Dependencies の検証 (`validate_dependencies`)

*   **MCP ツール:** `validate_dependencies`
*   **CLI Command:** `task-master validate