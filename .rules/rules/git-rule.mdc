---
description:
globs:
alwaysApply: false
---
Commit は、あなたの library の consumer に意図を伝えるために、以下の構造的要素を含みます。

-   `fix:`: `fix` type の commit は、あなたの codebase の bug を修正します (これは Semantic Versioning における PATCH に相関します)。
-   `feat:`: `feat` type の commit は、codebase に新しい feature を導入します (これは Semantic Versioning における MINOR に相関します)。
-   `BREAKING CHANGE:`: footer に `BREAKING CHANGE:` を持つか、`type`/`scope` の後に `!` を付加する commit は、破壊的な API 変更 (breaking API change) を導入します (Semantic Versioning における MAJOR に相関します)。`BREAKING CHANGE` は、あらゆる `type` の commit の一部となり得ます。
-   `fix:` および `feat:` 以外の `type` も許可されます。例えば、`@commitlint/config-conventional` (Angular convention に基づく) は `build:`, `chore:`, `ci:`, `docs:`, `style:`, `refactor:`, `perf:`, `test:` などを推奨しています。
-   `BREAKING CHANGE: <description>` 以外の footer も提供可能で、`git trailer format` に類似した規約に従います。
-   追加の `type` は Conventional Commits 仕様によって強制されるものではなく、(`BREAKING CHANGE` を含まない限り) Semantic Versioning に暗黙的な影響を与えません。Commit の `type` には `scope` を提供してもよく、これは追加の文脈情報を提供し、括弧で囲まれます。例: `feat(parser): add ability to parse arrays`。

### 仕様詳細 (Specification Details)

この document におけるキーワード “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, および “OPTIONAL” は、RFC 2119 に記述されている通りに解釈されるものとします。

1.  Commit は、`type` で始まる接頭辞を **MUST** (持たなければなりません)。`type` は名詞 (例: `feat`, `fix` など) で構成され、その後に **OPTIONAL** (任意) の `scope`、**OPTIONAL** (任意) の `!`、そして **REQUIRED** (必須) の末尾コロンとスペースが続きます。
2.  Commit があなたの application や library に新しい feature を追加する場合、`type` `feat` を **MUST** (使用しなければなりません)。
3.  Commit があなたの application の bug fix を表す場合、`type` `fix` を **MUST** (使用しなければなりません)。
4.  `type` の後に `scope` を **MAY** (提供してもよい) です。`scope` は、codebase のセクションを記述する名詞で構成され、括弧で囲まれている **MUST** (必要があります)。例: `fix(parser):`
5.  Description は、`type`/`scope` 接頭辞の後のコロンとスペースの直後に **MUST** (続けなければなりません)。Description はコード変更の短い要約です。例: `fix: array parsing issue when multiple spaces were contained in string`。
6.  短い description の後に、より長い commit body を **MAY** (提供してもよい) です。これはコード変更に関する追加の文脈情報を提供します。Body は description の後に1行の空白行を挟んで **MUST** (始めなければなりません)。
7.  Commit body は自由形式であり、改行で区切られた任意の数の段落で **MAY** (構成されてもよい) です。
8.  Body の後に1行の空白行を挟んで、1つ以上の footer を **MAY** (提供してもよい) です。各 footer は、単語の token、その後に続く `:<space>` または `<space>#` の区切り文字、そして文字列の値で **MUST** (構成されなければなりません) (これは `git trailer convention` に触発されたものです)。
9.  Footer の token は、空白文字の代わりに `-` を **MUST** (使用しなければなりません)。例: `Acked-by` (これは footer セクションを複数段落の body と区別するのに役立ちます)。例外として `BREAKING CHANGE` があり、これも token として **MAY** (使用されてもよい) です。
10. Footer の値はスペースや改行を **MAY** (含んでもよく)、次の有効な footer token/区切り文字のペアが観測された時点で parsing は **MUST** (終了しなければなりません)。
11. 破壊的変更 (Breaking changes) は、commit の `type`/`scope` 接頭辞、または footer のエントリで **MUST** (示されなければなりません)。
12. Footer に含める場合、破壊的変更は、大文字のテキスト `BREAKING CHANGE`、その後にコロン、スペース、そして description で **MUST** (構成されなければなりません)。例: `BREAKING CHANGE: environment variables now take precedence over config files`。
13. `type`/`scope` 接頭辞に含める場合、破壊的変更は `:` の直前の `!` によって **MUST** (示されなければなりません)。`!` が使用される場合、`BREAKING CHANGE:` は footer セクションから **MAY** (省略されてもよく)、commit description が破壊的変更を記述するために **SHALL** (使用されるものとします)。
14. `feat` と `fix` 以外の `type` も commit message で **MAY** (使用されてもよい) です。例: `docs: update ref docs`。
15. Conventional Commits を構成する情報の単位は、implementor によって大文字・小文字を区別して扱われては **MUST NOT** (なりません)。ただし、`BREAKING CHANGE` は大文字でなければ **MUST** (ならない) という例外があります。
16. Footer の token として使用される場合、`BREAKING-CHANGE` は `BREAKING CHANGE` と同義でなければ **MUST** (なりません)。