---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---
-   **ルール改善のトリガー (Rule Improvement Triggers):**
    -   既存のルールでカバーされていない新しいコードパターン
    -   ファイル間で繰り返される類似の実装
    -   防止できた可能性のある一般的なエラーパターン
    -   一貫して使用されている新しいライブラリまたはツール
    -   Codebase で新たに出現したベストプラクティス

-   **分析プロセス (Analysis Process):**
    -   新しいコードと既存のルールを比較する
    -   標準化すべきパターンを特定する
    -   外部ドキュメントへの参照を探す
    -   一貫したエラー処理パターンを確認する
    -   テストパターンとカバレッジを監視する

-   **ルールの更新 (Rule Updates):**
    -   **新しいルールを追加する場合 (Add New Rules When):**
        -   新しいテクノロジー/パターンが3つ以上のファイルで使用されている
        -   一般的なバグがルールによって防止できる可能性がある
        -   コードレビューで同じフィードバックが繰り返し言及される
        -   新しいセキュリティまたはパフォーマンスのパターンが出現する

    -   **既存のルールを修正する場合 (Modify Existing Rules When):**
        -   Codebase により良い例が存在する
        -   追加のエッジケースが発見される
        -   関連するルールが更新された
        -   実装の詳細が変更された

-   **パターンの認識例 (Example Pattern Recognition):**
    ```typescript
    // 以下のような繰り返しパターンを見かけた場合:
    const data = await prisma.user.findMany({
      select: { id: true, email: true },
      where: { status: 'ACTIVE' }
    });

    // @prisma.mdc への追加を検討:
    // - 標準的な select フィールド
    // - 一般的な where 条件
    // - パフォーマンス最適化パターン
    ```

-   **ルールの品質チェック (Rule Quality Checks):**
    -   ルールは実行可能で具体的であるべき
    -   例は実際のコードから引用するべき
    -   参照は最新であるべき
    -   パターンは一貫して強制されるべき

-   **継続的改善 (Continuous Improvement):**
    -   コードレビューのコメントを監視する
    -   一般的な開発に関する質問を追跡する
    -   大規模なリファクタリング後にルールを更新する
    -   関連ドキュメントへのリンクを追加する
    -   関連するルールを相互参照する

-   **ルールの非推奨化 (Rule Deprecation):**
    -   古いパターンを非推奨としてマークする
    -   もはや適用されないルールを削除する
    -   非推奨ルールへの参照を更新する
    -   古いパターンのための移行パスを文書化する

-   **ドキュメントの更新 (Documentation Updates):**
    -   例をコードと同期させる
    -   外部ドキュメントへの参照を更新する
    -   関連ルール間のリンクを維持する
    -   破壊的変更を文書化する

適切なルールのフォーマットと構造については @cursor_rules.mdc に従ってください。