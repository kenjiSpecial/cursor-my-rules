---
description: Tailwind CSS and UI component best practices for modern web applications
globs: **/*.css, **/*.tsx, **/*.jsx, tailwind.config.js, tailwind.config.ts
alwaysApply: false
---
## Tailwind CSS ベストプラクティス

Tailwind CSS を効果的に活用するためのベストプラクティスを以下にまとめました。ライブラリ名やプログラミング用語は適度に英語のまま残しています。

### プロジェクトセットアップ
* **適切なTailwind設定を使用する**: `tailwind.config.js` を適切に設定し、プロジェクトのニーズに合わせましょう。
* **テーマ拡張を適切に設定する**: `theme` セクションで、色、フォント、間隔などを拡張し、一貫したデザインシステムを構築します。
* **適切なPurge設定をセットアップする**: 不要なCSSを削除し、本番環境のファイルサイズを最適化するために、`purge` (または v3.0 以降の `content`) オプションを正しく設定します。
* **適切なプラグイン統合を使用する**: 必要な Tailwind プラグインを導入し、機能を拡張します。
* **カスタムのSpacingとBreakpointsを設定する**: プロジェクト固有のニーズに合わせて、カスタムの間隔 (`spacing`) やブレイクポイント (`breakpoints`) を定義します。
* **適切なカラーパレットをセットアップする**: デザインシステムに沿ったカラーパレットを定義し、プロジェクト全体で一貫した色使いを確保します。

### コンポーネントスタイリング
* **カスタムCSSよりもユーティリティクラスを使用する**: 可能な限り、Tailwind のユーティリティクラスを直接HTMLに適用し、カスタムCSSの記述を最小限に抑えます。
* **必要に応じて`@apply`で関連するユーティリティをグループ化する**: 複雑なコンポーネントや繰り返し使用するスタイルに対しては、`@apply`ディレクティブを使用して関連するユーティリティをグループ化し、可読性を高めます。
* **適切なレスポンシブデザインユーティリティを使用する**: `sm:`, `md:`, `lg:` といったプレフィックスを活用し、異なる画面サイズに対応したスタイルを適用します。
* **ダークモードを適切に実装する**: Tailwind のダークモード機能を活用し、ユーザーの好みに合わせてテーマを切り替えられるようにします。
* **適切なState Variantsを使用する**: `hover:`, `focus:`, `active:` などのバリアントを使用して、要素の状態に応じたスタイルを定義します。
* **コンポーネントのスタイルを常に一貫させる**: デザインシステムと命名規則に従い、コンポーネントのスタイルに一貫性を持たせます。

### レイアウト
* **FlexboxとGridユーティリティを効果的に使用する**: レイアウトの構築には、Tailwind の `flex` および `grid` ユーティリティを積極的に活用します。
* **適切な間隔システムを実装する**: `p-` (padding), `m-` (margin), `space-x-` (要素間のスペース) などのユーティリティを使い、一貫した間隔システムを適用します。
* **必要に応じてコンテナクエリを使用する**: 親コンテナのサイズに基づいてスタイルを適用するために、コンテナクエリ（Tailwind v3.2以降で利用可能）を検討します。
* **適切なレスポンシブブレイクポイントを実装する**: 複数のブレイクポイントを設定し、デバイスのサイズに応じてレイアウトが適切に変化するようにします。
* **適切なPaddingとMarginユーティリティを使用する**: `p-`, `m-` ユーティリティを適切に利用して、要素の内外の余白を調整します。
* **適切な配置ユーティリティを実装する**: `justify-`, `items-`, `self-` などのユーティリティを使用して、FlexboxやGrid内の要素の配置を制御します。

### タイポグラフィ
* **適切なフォントサイズユーティリティを使用する**: `text-sm`, `text-base`, `text-lg` などのユーティリティでフォントサイズを制御します。
* **適切な行の高さを実装する**: `leading-` ユーティリティを使用して行の高さ（line-height）を調整し、読みやすさを向上させます。
* **適切なフォントウェイトユーティリティを使用する**: `font-light`, `font-normal`, `font-bold` などのユーティリティでフォントの太さを設定します。
* **カスタムフォントを適切に設定する**: プロジェクトでカスタムフォントを使用する場合は、`tailwind.config.js` で適切に設定します。
* **適切なテキスト配置を使用する**: `text-left`, `text-center`, `text-right` などのユーティリティでテキストの配置を制御します。
* **適切なテキスト装飾を実装する**: `underline`, `line-through`, `no-underline` などのユーティリティでテキストの装飾を適用します。

### 色
* **セマンティックな色命名を使用する**: `primary`, `secondary`, `success`, `danger` のように、色の意味に基づいた命名を心がけ、理解しやすいコードにします。
* **適切な色のコントラストを実装する**: アクセシビリティを考慮し、テキストと背景色のコントラスト比が十分であることを確認します。
* **Opacityユーティリティを効果的に使用する**: `bg-opacity-50`, `text-opacity-75` などのユーティリティで要素の透明度を調整します。
* **カスタム色を適切に設定する**: プロジェクト固有のブランドカラーなどを使用する場合は、`tailwind.config.js` でカスタム色を定義します。
* **適切なグラデーションユーティリティを使用する**: `bg-gradient-to-r`, `from-`, `to-` などのユーティリティでグラデーションを作成します。
* **適切なHover Stateを実装する**: `hover:bg-blue-600` のように、ホバー時の色の変化を適切に設定します。

### コンポーネント
* **可能な場合はshadcn/uiコンポーネントを使用する**: もしプロジェクトが Next.js などを使用しており、UIフレームワークを検討している場合、高品質なUIコンポーネントを提供するshadcn/uiの利用を検討しましょう。
* **コンポーネントを適切に拡張する**: 既存のコンポーネントを基盤として、新しいコンポーネントを作成・拡張します。
* **コンポーネントのバリアントを常に一貫させる**: ボタンのサイズ、色などのバリアントに対して、一貫した命名規則とスタイリングを適用します。
* **適切なアニメーションを実装する**: `animate-spin`, `animate-bounce` などのユーティリティやカスタムアニメーションで、UIに動きを加えます。
* **適切なTransitionユーティリティを使用する**: `transition`, `duration-`, `ease-` などのユーティリティで、スムーズな状態変化を実装します。
* **アクセシビリティを常に念頭に置く**: セマンティックなHTML、キーボードナビゲーション、スクリーンリーダー対応など、アクセシビリティガイドラインに従いましょう。

### レスポンシブデザイン
* **モバイルファーストアプローチを使用する**: 最初にモバイルデバイス向けのスタイルを記述し、その後、より大きな画面サイズにスタイルを拡張します。
* **適切なブレイクポイントを実装する**: Tailwind のデフォルトブレイクポイントまたはカスタムブレイクポイントを効果的に使用し、異なるデバイスに対応させます。
* **コンテナクエリを効果的に使用する**: 必要に応じて、親コンテナのサイズに基づいて要素のレイアウトやスタイルを調整します。
* **異なる画面サイズに適切に対応する**: さまざまな画面サイズでのレイアウトとコンテンツの表示をテストし、最適化します。
* **適切なレスポンシブタイポグラフィを実装する**: 画面サイズに応じてフォントサイズや行の高さを調整し、どのデバイスでも読みやすくします。
* **適切なレスポンシブスペーシングを使用する**: 画面サイズに応じて要素の間隔や余白を調整し、適切な視覚的バランスを保ちます。

### パフォーマンス
* **適切なPurge設定を使用する**: 本番環境では、未使用のCSSを削除するために`purge` (または `content`) 設定を正しく行います。
* **カスタムCSSを最小限に抑える**: 可能であればTailwindのユーティリティクラスを優先し、カスタムCSSの量を減らします。
* **適切なキャッシング戦略を使用する**: CSSファイルをキャッシュに保存する戦略を適用し、ページのロード時間を短縮します。
* **適切なコード分割を実装する**: 必要に応じてCSSを複数のファイルに分割し、初期ロード時のファイルサイズを小さくします。
* **本番用に最適化する**: ビルドツール（例: Webpack, Vite）でTailwind CSSを本番用に最適化し、CSSの圧縮やミニファイを行います。
* **バンドルサイズを監視する**: CSSバンドルサイズを定期的に監視し、肥大化を防ぎます。

### ベストプラクティス
* **命名規則に従う**: Tailwind のユーティリティクラスの命名規則を理解し、一貫したコーディングスタイルを維持します。
* **スタイルを整理する**: コンポーネント指向でスタイルを整理し、コードベースを管理しやすくします。
* **適切なドキュメンテーションを使用する**: カスタム設定や複雑なコンポーネントについては、適切にドキュメントを作成し、チームメンバーが理解できるようにします。
* **適切なテストを実装する**: UIコンポーネントやレイアウトの整合性を確保するために、テスト（E2Eテストなど）を導入します。
* **アクセシビリティガイドラインに従う**: WAI-ARIAなどのアクセシビリティガイドラインを遵守し、すべてのユーザーがアプリケーションを利用できるようにします。
* **適切なバージョン管理を使用する**: Gitなどのバージョン管理システムを適切に利用し、コードの変更履歴を管理し、共同開発を円滑に行います。
