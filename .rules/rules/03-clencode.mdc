---
description: Guidelines for writing clean, maintainable, and human-readable code. Apply these rules when writing or reviewing code to ensure consistency and quality.
globs:
---
# Clean Code Guidelines

## マジックナンバーより定数を使う
- ハードコードされた値は、名前付き定数に置き換える
- 値の目的を説明する、分かりやすい定数名を使用する
- 定数はファイルの先頭、または専用の定数ファイルにまとめる

## 意味のある名前
- 変数、関数、クラスは、その目的が分かるようにする
- 名前は、なぜそれが存在するのか、どのように使われるのかを説明するものであるべき
- 一般的に理解されている場合を除き、略語は避ける

## スマートなコメント
- コードが何をするかをコメントするのではなく、コード自体が説明するようにする
- なぜ特定の方法で処理を行うのかを説明するためにコメントを使用する
- API、複雑なアルゴリズム、自明ではない副作用を文書化する

## 単一責任の原則
- 各関数は、正確に1つのことを行うべき
- 関数は小さく、焦点を絞ったものにする
- 関数が何をするかを説明するためにコメントが必要な場合、その関数は分割すべき

## DRY (Don't Repeat Yourself - 繰り返しを避ける)
- 繰り返し現れるコードは、再利用可能な関数に抽出する
- 適切な抽象化を通じて共通のロジックを共有する
- 「信頼できる唯一の情報源 (Single Source of Truth)」を維持する

## クリーンな構造
- 関連するコードをまとめる
- 論理的な階層でコードを整理する
- 一貫性のあるファイル名とフォルダ名の命名規則を使用する

## カプセル化
- 実装の詳細を隠蔽する
- 明確なインターフェースを公開する
- ネストされた条件分岐は、分かりやすい名前の関数に移動する

## コード品質の維持
- 継続的にリファクタリングを行う
- 技術的負債は早期に修正する
- コードは、見つけた時よりもクリーンな状態にする

## テスト
- バグを修正する前にテストを書く
- テストは読みやすく、保守しやすい状態に保つ
- エッジケースとエラー条件をテストする

## バージョン管理
- 明確なコミットメッセージを書く
- 小さく、焦点を絞ったコミットを行う
- 意味のあるブランチ名を使用する